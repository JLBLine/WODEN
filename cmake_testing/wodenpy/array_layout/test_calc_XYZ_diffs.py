from sys import path
import os
import unittest
import numpy as np
from ctypes import c_double
import argparse

from wodenpy.use_libwoden.woden_settings import Woden_Settings_Double
from wodenpy.array_layout.create_array_layout import calc_XYZ_diffs

D2R = np.pi / 180.0


LST_BEFORE = 0.0077340
LST_AFTER = 0.0042458877378725
JD_DATE = 2457278.2010995

lsts = np.array([0.0045377974422681, 0.0051216168443364])
mjds = np.array([57277.7011457963599241, 57277.7012383889523335])


expec_X_diffs_noprec = np.array([ -40.44336737520, -120.869939100358,
      -53.464326808358, -205.340847563037,
      -217.506234605481, 21.553607518498, -189.607475223256, -80.426571725158,
      -13.020959433159, -164.897480187837, -177.062867230281, 61.996974893698,
      -149.164107848056, 67.405612292000, -84.470908462678, -96.636295505123,
      142.423546618856, -68.737536122898, -151.876520754678, -164.041907797122,
      75.017934326856, -136.143148414897, -12.165387042444, 226.894455081534,
      15.733372339781, 239.059842123979, 27.898759382225, -211.161082741754,
      -40.44336737520, -120.869939100358,
      -53.464326808358, -205.340847563037,
      -217.506234605481, 21.553607518498, -189.607475223256, -80.426571725158,
      -13.020959433159, -164.897480187837, -177.062867230281, 61.996974893698,
      -149.164107848056, 67.405612292000, -84.470908462678, -96.636295505123,
      142.423546618856, -68.737536122898, -151.876520754678, -164.041907797122,
      75.017934326856, -136.143148414897, -12.165387042444, 226.894455081534,
      15.733372339781, 239.059842123979, 27.898759382225, -211.161082741754 ])

expec_Y_diffs_noprec = np.array([ 72.00000, -2.00000, -696.00000, -729.00000,
                                 -815.00000, -376.00000, -726.00000, -74.00000,
                                 -768.00000, -801.00000, -887.00000, -448.00000,
                                 -798.00000, -694.00000, -727.00000, -813.00000,
                                 -374.00000, -724.00000, -33.00000, -119.00000,
                                 320.00000, -30.00000, -86.00000, 353.00000,
                                 3.00000, 439.00000, 89.00000, -350.00000,
                                  72.00000, -2.00000, -696.00000, -729.00000,
                               -815.00000, -376.00000, -726.00000, -74.00000,
                               -768.00000, -801.00000, -887.00000, -448.00000,
                               -798.00000, -694.00000, -727.00000, -813.00000,
                               -374.00000, -724.00000, -33.00000, -119.00000,
                               320.00000, -30.00000, -86.00000, 353.00000,
                               3.00000, 439.00000, 89.00000, -350.00000 ])

expec_Z_diffs_noprec = np.array([ -80.401082302135, -235.837778614614,
      -101.835974777723, -399.314583157307, -436.851276646579, 36.172392828489,
      -365.811434128927, -155.436696312479, -21.434892475588, -318.913500855172,
      -356.450194344444, 116.573475130624, -285.410351826793, 134.001803836891,
      -163.476804542693, -201.013498031965, 272.010171443104, -129.973655514313,
      -297.478608379584, -335.015301868856, 138.008367606213, -263.975459351204,
      -37.536693489272, 435.486975985796, 33.503149028380, 473.023669475068,
      71.039842517651, -401.983826957417, -80.401082302135, -235.837778614614,
      -101.835974777723, -399.314583157307, -436.851276646579, 36.172392828489,
      -365.811434128927, -155.436696312479, -21.434892475588, -318.913500855172,
      -356.450194344444, 116.573475130624, -285.410351826793, 134.001803836891,
      -163.476804542693, -201.013498031965, 272.010171443104, -129.973655514313,
      -297.478608379584, -335.015301868856, 138.008367606213, -263.975459351204,
      -37.536693489272, 435.486975985796, 33.503149028380, 473.023669475068,
      71.039842517651, -401.983826957417 ])

##Expected baseline lengths when using expec_X_prec, expec_Y_prec,
##expec_Z_prec
expec_X_diffs_prec = np.array([ -40.564159742981, -121.229823342472,
  -53.637888759318, -205.969153599296,
  -218.194068025104, 21.598969731563, -190.184583412439, -80.665663599491,
  -13.073729016338, -165.404993856315, -177.629908282124, 62.163129474543,
  -149.620423669458, 67.591934583153, -84.739330256824, -96.964244682632,
  142.828793074035, -68.954760069967, -152.331264839977, -164.556179265786,
  75.236858490881, -136.546694653120, -12.224914425809, 227.568123330858,
  15.784570186857, 239.793037756667, 28.009484612666, -211.783553144002,
  -40.564124921564, -121.229817054236, -53.638198576162, -205.969469186852,
  -218.194421133888, 21.598799580336, -190.184898672298, -80.665692132672,
  -13.074073654597, -165.405344265288, -177.630296212324, 62.162924501901,
  -149.620773750734, 67.591618478074, -84.739652132616, -96.964604079652,
  142.828616634573, -68.955081618062, -152.331270610690, -164.556222557727,
  75.236998156498, -136.546700096136, -12.224951947037, 227.568268767188,
  15.784570514554, 239.793220714225, 28.009522461591, -211.783698252634])

expec_Y_diffs_prec = np.array([ 72.005217267410, -1.984637686372,
  -695.993332167553, -728.973969804067,
  -814.971708791256, -376.002434149451, -725.976114735447, -73.989854953782,
  -767.998549434963, -800.979187071477, -886.976926058666, -448.007651416860,
  -797.981332002857, -694.008694481181, -726.989332117695, -812.987071104884,
  -374.017796463079, -723.991477049075, -32.980637636514, -118.978376623703,
  319.990898018102, -29.982782567894, -85.997738987189, 352.971535654616,
  2.997855068620, 438.969274641805, 88.995594055809, -349.973680585997,
  72.005307036789, -1.984373352941, -695.993217416277, -728.973521891142,
  -814.971221971432, -376.002476021858, -725.975703729613, -73.989680389730,
  -767.998524453066, -800.978828927931, -886.976529008221, -448.007783058647,
  -797.981010766402, -694.008844063335, -726.989148538201, -812.986848618491,
  -374.018102668917, -723.991330376672, -32.980304474866, -118.978004555155,
  319.990741394419, -29.982486313336, -85.997700080290, 352.971045869284,
  2.997818161529, 438.968745949574, 88.995518241819, -349.973227707755 ])

expec_Z_diffs_prec = np.array([ -80.335531557456, -235.653116138121,
  -101.790267058052, -399.038418092405,
  -436.560949408575, 36.119994742844, -365.559167667646, -155.317584580665,
  -21.454735500595, -318.702886534948, -356.225417851118, 116.455526300300,
  -285.223636110189, 133.862849080070, -163.385301954283, -200.907833270453,
  271.773110880965, -129.906051529524, -297.248151034353, -334.770682350523,
  137.910261800896, -263.768900609594, -37.522531316170, 435.158412835249,
  33.479250424759, 472.680944151419, 71.001781740929, -401.679162410490,
  -80.335468679068, -235.653121599084, -101.790888413666, -399.039073455859,
  -436.561681717989, 36.119660603620, -365.559819880825, -155.317652920016,
  -21.455419734599, -318.703604776792, -356.226213038921, 116.455129282687,
  -285.224351201757, 133.862233185417, -163.385951856776, -200.908560118905,
  271.772782202703, -129.906698281741, -297.248185042193, -334.770793304323,
  137.910549017286, -263.768931467158, -37.522608262129, 435.158734059479,
  33.479253575035, 472.681342321608, 71.001861837164, -401.679480484444 ])


expec_X_noprec = np.array([53.009559921431, 93.452927296631, 173.879499021789,
                           106.473886729789, 258.350407484468, 270.515794526912,
                           31.455952402933, 242.617035144687,
                           53.009559921431, 93.452927296631, 173.879499021789,
                           106.473886729789, 258.350407484468, 270.515794526912,
                           31.455952402933, 242.617035144687])

expec_Y_noprec = np.array([84.00000, 12.00000, 86.00000, 780.00000,
                           813.00000, 899.00000, 460.00000, 810.00000,
                           84.00000, 12.00000, 86.00000, 780.00000,
                           813.00000, 899.00000, 460.00000, 810.00000])

expec_Z_noprec = np.array([98.706567952372, 179.107650254506, 334.544346566986,
                           200.542542730095,  498.021151109679,  535.557844598951,
                           62.534175123882, 464.518002081299,
                           98.706567952372, 179.107650254506, 334.544346566986,
                           200.542542730095,  498.021151109679,  535.557844598951,
                           62.534175123882, 464.518002081299])


expec_X_prec = np.array([53.162354565825, 93.726514308806, 174.392177908297,
                          106.800243325144, 259.131508165121, 271.356422590930,
                          31.563384834262, 243.346937978264, 53.162389323963,
                          93.726514245527, 174.392206378199, 106.800587900124,
                          259.131858510815, 271.356810457851, 31.563589743626,
                          243.347287996261])

expec_Y_prec = np.array([83.993507108853, 11.988289841444, 85.978144795225,
                          779.986839276406, 812.967476912920, 898.965215900110,
                          459.995941258304, 809.969621844301, 83.993395385724,
                          11.988088348935, 85.977768738665, 779.986612802000,
                          812.966917276866, 898.964617357155, 459.995871407581,
                          809.969099115337])

expec_Z_prec = np.array([98.629888069350, 178.965419626805, 334.283004207471,
                          200.420155127401, 497.668306161755, 535.190837477925,
                          62.509893326505, 464.189055736995, 98.629964478068,
                          178.965433157135, 334.283086077152, 200.420852891734,
                          497.669037933927, 535.191646196057, 62.510303874448,
                          464.189784358892])

##Vehicle for running tests
class Test(unittest.TestCase):
    def run_test_RTS_PrecessXYZtoJ2000(self, do_precession = 0):
        
        woden_settings = Woden_Settings_Double()
        ##Set up where woden_settings correctly
        woden_settings.latitude = -0.46606083776035967
        woden_settings.jd_date = 2457278.2010995
        woden_settings.lst_obs_epoch_base = LST_BEFORE
        woden_settings.do_precession = do_precession
        woden_settings.num_time_steps = 2
        woden_settings.time_res = 8
        woden_settings.latitude_obs_epoch_base = -0.46606083776035967

        ##These are ctype double arrays, and as ever we have to iterate
        ##over them to populate
        num_times_array = woden_settings.num_time_steps*c_double
        woden_settings.lsts = num_times_array()
        woden_settings.mjds = num_times_array()

        for time_ind in range(woden_settings.num_time_steps):
            woden_settings.lsts[time_ind] = lsts[time_ind]
            woden_settings.mjds[time_ind] = mjds[time_ind]

        if do_precession:
            woden_settings.lst_base = LST_AFTER
        else:
            woden_settings.lst_base = LST_BEFORE

        woden_settings.do_autos = 1

        ##Some things get setup after checking the input arguments, so
        ##quickly knock up a reduced version for this test
        parser = argparse.ArgumentParser()
        parser.add_argument('--num_antennas', type=int)
        parser.add_argument('--east',)
        parser.add_argument('--north',)
        parser.add_argument('--height',)
        args = parser.parse_args(['--num_antennas=8'])

        args.east = np.array([84., 12., 86., 780., 813., 899., 460., 810.])
        args.north = np.array([112., 202., 377., 227., 561., 600., 70., 524.])
        args.height = np.array([3., 3., 5., 5., 7., 1., 0., 8.])

        # ##code we are actually testing
        array_layout = calc_XYZ_diffs(woden_settings, args)

        expec_num = woden_settings.num_time_steps*args.num_antennas

        found_X = np.ctypeslib.as_array(array_layout.ant_X, shape=(expec_num, ))
        found_Y = np.ctypeslib.as_array(array_layout.ant_Y, shape=(expec_num, ))
        found_Z = np.ctypeslib.as_array(array_layout.ant_Z, shape=(expec_num, ))

        expec_num = woden_settings.num_time_steps*woden_settings.num_baselines

        found_X_diff = np.ctypeslib.as_array(array_layout.X_diff_metres, shape=(expec_num, ))
        found_Y_diff = np.ctypeslib.as_array(array_layout.Y_diff_metres, shape=(expec_num, ))
        found_Z_diff = np.ctypeslib.as_array(array_layout.Z_diff_metres, shape=(expec_num, ))

        if do_precession:

            self.assertTrue(np.allclose(found_X, expec_X_prec, atol=1e-10))
            self.assertTrue(np.allclose(found_Y, expec_Y_prec, atol=1e-10))
            self.assertTrue(np.allclose(found_Z, expec_Z_prec, atol=1e-10))

            self.assertTrue(np.allclose(found_X_diff, expec_X_diffs_prec, atol=1e-10))
            self.assertTrue(np.allclose(found_Y_diff, expec_Y_diffs_prec, atol=1e-10))
            self.assertTrue(np.allclose(found_Z_diff, expec_Z_diffs_prec, atol=1e-10))

        else:

            self.assertTrue(np.allclose(found_X, expec_X_noprec, atol=1e-10))
            self.assertTrue(np.allclose(found_Y, expec_Y_noprec, atol=1e-10))
            self.assertTrue(np.allclose(found_Z, expec_Z_noprec, atol=1e-10))

            self.assertTrue(np.allclose(found_X_diff, expec_X_diffs_noprec, atol=1e-10))
            self.assertTrue(np.allclose(found_Y_diff, expec_Y_diffs_noprec, atol=1e-10))
            self.assertTrue(np.allclose(found_Z_diff, expec_Z_diffs_noprec, atol=1e-10))

            

        
    def test_without_precession(self):
        self.run_test_RTS_PrecessXYZtoJ2000(do_precession=0)

    def test_with_precession(self):
        self.run_test_RTS_PrecessXYZtoJ2000(do_precession=1)


##Run the test
if __name__ == '__main__':
   unittest.main()
